Index.PACKAGES = {"com" : [], "com.markblokpoel" : [], "com.markblokpoel.probability4scala" : [{"name" : "com.markblokpoel.probability4scala.Conditional1", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conditional1[A, B]) => Boolean, msg: => Any): Conditional1[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conditional1[A, B]) => Boolean): Conditional1[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Conditional1[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Conditional1[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Conditional1[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Conditional1[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.markblokpoel.probability4scala.Conditional1.toString", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#toString():String", "kind" : "def"}, {"member" : "com.markblokpoel.probability4scala.Conditional1#<init>", "error" : "unsupported entity"}, {"label" : "condition", "tail" : ": B", "member" : "com.markblokpoel.probability4scala.Conditional1.condition", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#condition:B", "kind" : "val"}, {"label" : "value", "tail" : ": A", "member" : "com.markblokpoel.probability4scala.Conditional1.value", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#value:A", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Conditional1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/markblokpoel\/probability4scala\/Conditional1.html", "kind" : "case class"}, {"name" : "com.markblokpoel.probability4scala.Conditional2", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conditional2[A, B]) => Boolean, msg: => Any): Conditional2[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conditional2[A, B]) => Boolean): Conditional2[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Conditional2[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Conditional2[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Conditional2[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Conditional2[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.markblokpoel.probability4scala.Conditional2.toString", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#toString():String", "kind" : "def"}, {"member" : "com.markblokpoel.probability4scala.Conditional2#<init>", "error" : "unsupported entity"}, {"label" : "prior", "tail" : ": Distribution[B]", "member" : "com.markblokpoel.probability4scala.Conditional2.prior", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#prior:com.markblokpoel.probability4scala.Distribution[B]", "kind" : "val"}, {"label" : "value", "tail" : ": A", "member" : "com.markblokpoel.probability4scala.Conditional2.value", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#value:A", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Conditional2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/markblokpoel\/probability4scala\/Conditional2.html", "kind" : "case class"}, {"name" : "com.markblokpoel.probability4scala.ConditionalDistribution", "case object" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html", "shortDescription" : "Implements a generic conditional probability distribution for two variables: ", "members_case object" : [{"label" : "apply", "tail" : "(domain1: Set[A], domain2: Set[B], distribution: Map[(A, B), Double])(arg0: ClassTag[X]): ConditionalDistribution[A, B]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.apply", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#apply[A,B,X](domain1:Set[A],domain2:Set[B],distribution:Map[(A,B),Double])(implicitevidence$1:scala.reflect.ClassTag[X]):com.markblokpoel.probability4scala.ConditionalDistribution[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConditionalDistribution[A, B]) => Boolean, msg: => Any): ConditionalDistribution[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConditionalDistribution[A, B]) => Boolean): ConditionalDistribution[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ConditionalDistribution[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConditionalDistribution[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConditionalDistribution[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConditionalDistribution[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "cpt", "tail" : "(): Unit", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.cpt", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#cpt():Unit", "kind" : "def"}, {"label" : "sum", "tail" : "(): BigDecimal", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.sum", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#sum:BigDecimal", "kind" : "def"}, {"label" : "bayes", "tail" : "(prior: Distribution[B]): ConditionalDistribution[B, A]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.bayes", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#bayes(prior:com.markblokpoel.probability4scala.Distribution[B]):com.markblokpoel.probability4scala.ConditionalDistribution[B,A]", "kind" : "def"}, {"label" : "pr", "tail" : "(conditional: Conditional2[A, B]): BigDecimal", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.pr", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#pr(conditional:com.markblokpoel.probability4scala.Conditional2[A,B]):BigDecimal", "kind" : "def"}, {"label" : "*", "tail" : "(prior: Distribution[B]): Distribution[A]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.*", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#*(prior:com.markblokpoel.probability4scala.Distribution[B]):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "marginalLikelihood", "tail" : "(): Distribution[B]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.marginalLikelihood", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#marginalLikelihood:com.markblokpoel.probability4scala.Distribution[B]", "kind" : "def"}, {"label" : "marginalDistribution", "tail" : "(): Distribution[A]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.marginalDistribution", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#marginalDistribution:com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "prV2", "tail" : "(conditional: B): BigDecimal", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.prV2", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#prV2(conditional:B):BigDecimal", "kind" : "def"}, {"label" : "prV1", "tail" : "(value: A): BigDecimal", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.prV1", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#prV1(value:A):BigDecimal", "kind" : "def"}, {"label" : "pr", "tail" : "(conditional: B): Distribution[A]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.pr", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#pr(conditional:B):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "pr", "tail" : "(conditional: Conditional1[A, B]): BigDecimal", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.pr", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#pr(conditional:com.markblokpoel.probability4scala.Conditional1[A,B]):BigDecimal", "kind" : "def"}, {"member" : "com.markblokpoel.probability4scala.ConditionalDistribution#<init>", "error" : "unsupported entity"}, {"label" : "distribution", "tail" : ": Map[(A, B), BigDecimal]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.distribution", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#distribution:Map[(A,B),BigDecimal]", "kind" : "val"}, {"label" : "domainV2", "tail" : ": Set[B]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.domainV2", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#domainV2:Set[B]", "kind" : "val"}, {"label" : "domainV1", "tail" : ": Set[A]", "member" : "com.markblokpoel.probability4scala.ConditionalDistribution.domainV1", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#domainV1:Set[A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/markblokpoel\/probability4scala\/ConditionalDistribution.html", "kind" : "case class"}, {"name" : "com.markblokpoel.probability4scala.DefaultMain", "shortDescription" : "", "object" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "delayedInit", "tail" : "(body: => Unit): Unit", "member" : "scala.App.delayedInit", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#args:Array[String]", "kind" : "final def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#executionStart:Long", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/DefaultMain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.markblokpoel.probability4scala.Demo", "shortDescription" : "", "object" : "com\/markblokpoel\/probability4scala\/Demo$.html", "members_object" : [{"label" : "li1", "tail" : ": ConditionalDistribution[String, String]", "member" : "com.markblokpoel.probability4scala.Demo.li1", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#li1:com.markblokpoel.probability4scala.ConditionalDistribution[String,String]", "kind" : "val"}, {"label" : "sp1", "tail" : ": ConditionalDistribution[String, String]", "member" : "com.markblokpoel.probability4scala.Demo.sp1", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#sp1:com.markblokpoel.probability4scala.ConditionalDistribution[String,String]", "kind" : "val"}, {"label" : "li0", "tail" : ": ConditionalDistribution[String, String]", "member" : "com.markblokpoel.probability4scala.Demo.li0", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#li0:com.markblokpoel.probability4scala.ConditionalDistribution[String,String]", "kind" : "val"}, {"label" : "lex2distrF", "tail" : "(lex: Map[(A, B), Double]): Map[(A, B), BigDecimal]", "member" : "com.markblokpoel.probability4scala.Demo.lex2distrF", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#lex2distrF[A,B](lex:Map[(A,B),Double]):Map[(A,B),BigDecimal]", "kind" : "def"}, {"label" : "li0f", "tail" : ": Map[(String, String), Double]", "member" : "com.markblokpoel.probability4scala.Demo.li0f", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#li0f:scala.collection.immutable.Map[(String,String),Double]", "kind" : "val"}, {"label" : "rsaReferents", "tail" : ": Set[String]", "member" : "com.markblokpoel.probability4scala.Demo.rsaReferents", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#rsaReferents:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "rsaSignals", "tail" : ": Set[String]", "member" : "com.markblokpoel.probability4scala.Demo.rsaSignals", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#rsaSignals:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "rr3", "tail" : ": String", "member" : "com.markblokpoel.probability4scala.Demo.rr3", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#rr3:String", "kind" : "val"}, {"label" : "rr2", "tail" : ": String", "member" : "com.markblokpoel.probability4scala.Demo.rr2", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#rr2:String", "kind" : "val"}, {"label" : "rr1", "tail" : ": String", "member" : "com.markblokpoel.probability4scala.Demo.rr1", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#rr1:String", "kind" : "val"}, {"label" : "s3", "tail" : ": String", "member" : "com.markblokpoel.probability4scala.Demo.s3", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#s3:String", "kind" : "val"}, {"label" : "s2", "tail" : ": String", "member" : "com.markblokpoel.probability4scala.Demo.s2", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#s2:String", "kind" : "val"}, {"label" : "s1", "tail" : ": String", "member" : "com.markblokpoel.probability4scala.Demo.s1", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#s1:String", "kind" : "val"}, {"label" : "posterior", "tail" : ": Distribution[String]", "member" : "com.markblokpoel.probability4scala.Demo.posterior", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#posterior:com.markblokpoel.probability4scala.Distribution[String]", "kind" : "val"}, {"label" : "p3", "tail" : ": BigDecimal", "member" : "com.markblokpoel.probability4scala.Demo.p3", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#p3:BigDecimal", "kind" : "val"}, {"label" : "cdistr", "tail" : ": ConditionalDistribution[String, Ref]", "member" : "com.markblokpoel.probability4scala.Demo.cdistr", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#cdistr:com.markblokpoel.probability4scala.ConditionalDistribution[String,com.markblokpoel.probability4scala.Demo.Ref]", "kind" : "val"}, {"label" : "cd", "tail" : ": Map[(String, Ref), Double]", "member" : "com.markblokpoel.probability4scala.Demo.cd", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#cd:scala.collection.immutable.Map[(String,com.markblokpoel.probability4scala.Demo.Ref),Double]", "kind" : "val"}, {"label" : "p2", "tail" : ": BigDecimal", "member" : "com.markblokpoel.probability4scala.Demo.p2", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#p2:BigDecimal", "kind" : "val"}, {"label" : "referentPriors", "tail" : ": Distribution[Ref]", "member" : "com.markblokpoel.probability4scala.Demo.referentPriors", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#referentPriors:com.markblokpoel.probability4scala.Distribution[com.markblokpoel.probability4scala.Demo.Ref]", "kind" : "val"}, {"label" : "customDistribution", "tail" : ": Vector[Double]", "member" : "com.markblokpoel.probability4scala.Demo.customDistribution", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#customDistribution:scala.collection.immutable.Vector[Double]", "kind" : "val"}, {"label" : "referents", "tail" : ": Vector[Ref]", "member" : "com.markblokpoel.probability4scala.Demo.referents", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#referents:scala.collection.immutable.Vector[com.markblokpoel.probability4scala.Demo.Ref]", "kind" : "val"}, {"label" : "r3", "tail" : ": Ref", "member" : "com.markblokpoel.probability4scala.Demo.r3", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#r3:com.markblokpoel.probability4scala.Demo.Ref", "kind" : "val"}, {"label" : "r2", "tail" : ": Ref", "member" : "com.markblokpoel.probability4scala.Demo.r2", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#r2:com.markblokpoel.probability4scala.Demo.Ref", "kind" : "val"}, {"label" : "r1", "tail" : ": Ref", "member" : "com.markblokpoel.probability4scala.Demo.r1", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#r1:com.markblokpoel.probability4scala.Demo.Ref", "kind" : "val"}, {"label" : "p1", "tail" : ": BigDecimal", "member" : "com.markblokpoel.probability4scala.Demo.p1", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#p1:BigDecimal", "kind" : "val"}, {"label" : "signalPriors", "tail" : ": Distribution[String]", "member" : "com.markblokpoel.probability4scala.Demo.signalPriors", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#signalPriors:com.markblokpoel.probability4scala.Distribution[String]", "kind" : "val"}, {"label" : "signals", "tail" : ": Set[String]", "member" : "com.markblokpoel.probability4scala.Demo.signals", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#signals:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "Ref", "tail" : "", "member" : "com.markblokpoel.probability4scala.Demo.Ref", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#RefextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "delayedInit", "tail" : "(body: => Unit): Unit", "member" : "scala.App.delayedInit", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#args:Array[String]", "kind" : "final def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#executionStart:Long", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Demo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.markblokpoel.probability4scala.Distribution", "case object" : "com\/markblokpoel\/probability4scala\/Distribution$.html", "shortDescription" : "Implements a generic probability distribution.", "members_case object" : [{"label" : "apply", "tail" : "(domain: Set[A], distribution: Map[A, Double])(arg0: ClassTag[X], arg1: ClassTag[Y]): Distribution[A]", "member" : "com.markblokpoel.probability4scala.Distribution.apply", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#apply[A,X,Y](domain:Set[A],distribution:Map[A,Double])(implicitevidence$4:scala.reflect.ClassTag[X],implicitevidence$5:scala.reflect.ClassTag[Y]):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(domain: Vector[A], distribution: Vector[BigDecimal])(arg0: ClassTag[X], arg1: ClassTag[Y]): Distribution[A]", "member" : "com.markblokpoel.probability4scala.Distribution.apply", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#apply[A,X,Y](domain:Vector[A],distribution:Vector[BigDecimal])(implicitevidence$2:scala.reflect.ClassTag[X],implicitevidence$3:scala.reflect.ClassTag[Y]):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(domain: Vector[A], distribution: Vector[Double])(arg0: ClassTag[X]): Distribution[A]", "member" : "com.markblokpoel.probability4scala.Distribution.apply", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#apply[A,X](domain:Vector[A],distribution:Vector[Double])(implicitevidence$1:scala.reflect.ClassTag[X]):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Distribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Distribution[A]) => Boolean, msg: => Any): Distribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Distribution[A]) => Boolean): Distribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): Distribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Distribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Distribution[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Distribution[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hist", "tail" : "(): Unit", "member" : "com.markblokpoel.probability4scala.Distribution.hist", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#hist():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.markblokpoel.probability4scala.Distribution.toString", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#toString():String", "kind" : "def"}, {"label" : "sum", "tail" : "(): BigDecimal", "member" : "com.markblokpoel.probability4scala.Distribution.sum", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#sum:BigDecimal", "kind" : "def"}, {"label" : "sample", "tail" : "(n: Int): Iterator[A]", "member" : "com.markblokpoel.probability4scala.Distribution.sample", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#sample(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "sample", "tail" : "(): A", "member" : "com.markblokpoel.probability4scala.Distribution.sample", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#sample:A", "kind" : "def"}, {"label" : "\/", "tail" : "(scalar: BigDecimal): Distribution[A]", "member" : "com.markblokpoel.probability4scala.Distribution.\/", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#\/(scalar:BigDecimal):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "*", "tail" : "(scalar: BigDecimal): Distribution[A]", "member" : "com.markblokpoel.probability4scala.Distribution.*", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#*(scalar:BigDecimal):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "pr", "tail" : "(value: A): BigDecimal", "member" : "com.markblokpoel.probability4scala.Distribution.pr", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#pr(value:A):BigDecimal", "kind" : "def"}, {"member" : "com.markblokpoel.probability4scala.Distribution#<init>", "error" : "unsupported entity"}, {"label" : "distribution", "tail" : ": Map[A, BigDecimal]", "member" : "com.markblokpoel.probability4scala.Distribution.distribution", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#distribution:Map[A,BigDecimal]", "kind" : "val"}, {"label" : "domain", "tail" : ": Set[A]", "member" : "com.markblokpoel.probability4scala.Distribution.domain", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#domain:Set[A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Distribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/markblokpoel\/probability4scala\/Distribution.html", "kind" : "case class"}, {"name" : "com.markblokpoel.probability4scala.DistributionHelpers", "shortDescription" : "Helpers for Distribution and ConditionalDistribution.", "object" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html", "members_object" : [{"label" : "pr", "tail" : "(given: B, distribution: ConditionalDistribution[A, B]): Distribution[A]", "member" : "com.markblokpoel.probability4scala.DistributionHelpers.pr", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#pr[A,B](given:B,distribution:com.markblokpoel.probability4scala.ConditionalDistribution[A,B]):com.markblokpoel.probability4scala.Distribution[A]", "kind" : "def"}, {"label" : "prV1", "tail" : "(value: A, distribution: ConditionalDistribution[A, B]): BigDecimal", "member" : "com.markblokpoel.probability4scala.DistributionHelpers.prV1", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#prV1[A,B](value:A,distribution:com.markblokpoel.probability4scala.ConditionalDistribution[A,B]):BigDecimal", "kind" : "def"}, {"label" : "pr", "tail" : "(conditional: Conditional1[A, B], distribution: ConditionalDistribution[A, B]): BigDecimal", "member" : "com.markblokpoel.probability4scala.DistributionHelpers.pr", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#pr[A,B](conditional:com.markblokpoel.probability4scala.Conditional1[A,B],distribution:com.markblokpoel.probability4scala.ConditionalDistribution[A,B]):BigDecimal", "kind" : "def"}, {"label" : "pr", "tail" : "(value: A, distribution: Distribution[A]): BigDecimal", "member" : "com.markblokpoel.probability4scala.DistributionHelpers.pr", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#pr[A](value:A,distribution:com.markblokpoel.probability4scala.Distribution[A]):BigDecimal", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/DistributionHelpers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.markblokpoel.probability4scala.Implicits", "shortDescription" : "Implicit functions for more concise syntax.", "object" : "com\/markblokpoel\/probability4scala\/Implicits$.html", "members_object" : [{"label" : "ImplInt", "tail" : "", "member" : "com.markblokpoel.probability4scala.Implicits.ImplInt", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#ImplIntextendsAnyRef", "kind" : "implicit class"}, {"label" : "ImplDouble", "tail" : "", "member" : "com.markblokpoel.probability4scala.Implicits.ImplDouble", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#ImplDoubleextendsAnyRef", "kind" : "implicit class"}, {"label" : "ImplConditional", "tail" : "", "member" : "com.markblokpoel.probability4scala.Implicits.ImplConditional", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#ImplConditional[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ImplDistributionConstruct", "tail" : "", "member" : "com.markblokpoel.probability4scala.Implicits.ImplDistributionConstruct", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#ImplDistributionConstruct[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/Implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.markblokpoel.probability4scala.datastructures" : [{"name" : "com.markblokpoel.probability4scala.datastructures.PBranch", "shortDescription" : "", "object" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PBranch[A]) => Boolean, msg: => Any): PBranch[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PBranch[A]) => Boolean): PBranch[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PBranch[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PBranch[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PBranch[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PBranch[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.markblokpoel.probability4scala.datastructures.PBranch.toString", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#toString():String", "kind" : "def"}, {"label" : "apply", "tail" : "(t: BigDecimal): A", "member" : "com.markblokpoel.probability4scala.datastructures.PBranch.apply", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#apply(t:BigDecimal):A", "kind" : "def"}, {"member" : "com.markblokpoel.probability4scala.datastructures.PBranch#<init>", "error" : "unsupported entity"}, {"label" : "threshold", "tail" : ": BigDecimal", "member" : "com.markblokpoel.probability4scala.datastructures.PBranch.threshold", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#threshold:BigDecimal", "kind" : "val"}, {"label" : "right", "tail" : ": PTree[A]", "member" : "com.markblokpoel.probability4scala.datastructures.PBranch.right", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#right:com.markblokpoel.probability4scala.datastructures.PTree[A]", "kind" : "val"}, {"label" : "left", "tail" : ": PTree[A]", "member" : "com.markblokpoel.probability4scala.datastructures.PBranch.left", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#left:com.markblokpoel.probability4scala.datastructures.PTree[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(left: PTree[A], right: PTree[A], threshold: BigDecimal): PBranch[A]", "member" : "com.markblokpoel.probability4scala.datastructures.PBranch.apply", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#apply[A](left:com.markblokpoel.probability4scala.datastructures.PTree[A],right:com.markblokpoel.probability4scala.datastructures.PTree[A],threshold:BigDecimal):com.markblokpoel.probability4scala.datastructures.PBranch[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/markblokpoel\/probability4scala\/datastructures\/PBranch.html", "kind" : "class"}, {"name" : "com.markblokpoel.probability4scala.datastructures.PLeaf", "shortDescription" : "", "object" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PLeaf[A]) => Boolean, msg: => Any): PLeaf[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PLeaf[A]) => Boolean): PLeaf[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PLeaf[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PLeaf[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PLeaf[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PLeaf[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "com.markblokpoel.probability4scala.datastructures.PLeaf.toString", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#toString():String", "kind" : "def"}, {"label" : "apply", "tail" : "(t: BigDecimal): A", "member" : "com.markblokpoel.probability4scala.datastructures.PLeaf.apply", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#apply(t:BigDecimal):A", "kind" : "def"}, {"member" : "com.markblokpoel.probability4scala.datastructures.PLeaf#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": A", "member" : "com.markblokpoel.probability4scala.datastructures.PLeaf.value", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#value:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(value: A): PLeaf[A]", "member" : "com.markblokpoel.probability4scala.datastructures.PLeaf.apply", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#apply[A](value:A):com.markblokpoel.probability4scala.datastructures.PLeaf[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/markblokpoel\/probability4scala\/datastructures\/PLeaf.html", "kind" : "class"}, {"name" : "com.markblokpoel.probability4scala.datastructures.ProbabilityTree", "shortDescription" : "Constructs a tree-representation of the distribution where elements are organized according to theirprobability mass.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ProbabilityTree[A]) => Boolean, msg: => Any): ProbabilityTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ProbabilityTree[A]) => Boolean): ProbabilityTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): ProbabilityTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ProbabilityTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ProbabilityTree[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ProbabilityTree[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(p: BigDecimal): A", "member" : "com.markblokpoel.probability4scala.datastructures.ProbabilityTree.apply", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#apply(p:BigDecimal):A", "kind" : "def"}, {"label" : "tree", "tail" : ": PTree[A]", "member" : "com.markblokpoel.probability4scala.datastructures.ProbabilityTree.tree", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#tree:com.markblokpoel.probability4scala.datastructures.PTree[A]", "kind" : "val"}, {"member" : "com.markblokpoel.probability4scala.datastructures.ProbabilityTree#<init>", "error" : "unsupported entity"}, {"label" : "distribution", "tail" : ": Distribution[A]", "member" : "com.markblokpoel.probability4scala.datastructures.ProbabilityTree.distribution", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#distribution:com.markblokpoel.probability4scala.Distribution[A]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/markblokpoel\/probability4scala\/datastructures\/ProbabilityTree.html", "kind" : "case class"}, {"name" : "com.markblokpoel.probability4scala.datastructures.PTree", "trait" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html", "kind" : "trait", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PTree[A]) => Boolean, msg: => Any): PTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PTree[A]) => Boolean): PTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: => Any): PTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PTree[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PTree[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PTree[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(t: BigDecimal): A", "member" : "com.markblokpoel.probability4scala.datastructures.PTree.apply", "link" : "com\/markblokpoel\/probability4scala\/datastructures\/PTree.html#apply(t:BigDecimal):A", "kind" : "abstract def"}], "shortDescription" : ""}]};